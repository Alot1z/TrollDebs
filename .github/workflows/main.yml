name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  build:
    name: Build
    runs-on: macos-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Build Environment
      run: |
        echo "Setting up build environment..."
        xcode-select --install || true
        xcodebuild -version
        brew install ldid dpkg || true

    - name: Select Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0.1'

    - name: List directory contents
      run: |
        ls -la
        xcodebuild -list -project TrollDebs.xcodeproj || true

    - name: Find build directory
      id: find_build
      run: |
        BUILD_DIR=$(xcodebuild -project TrollDebs.xcodeproj -scheme TrollDebs -showBuildSettings 2>/dev/null | grep -m 1 "BUILD_DIR" | grep -oEi "\/.*" | xargs)
        echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
        echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_OUTPUT
        echo "Found build directory: ${BUILD_DIR}"

    - name: Build with xcodebuild
      run: |
        set -o pipefail
        xcodebuild \
          -project "${{ github.workspace }}/TrollDebs.xcodeproj" \
          -scheme TrollDebs \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          clean build \
          CODE_SIGNING_ALLOWED=NO

    - name: Find built app
      run: |
        find "${{ env.BUILD_DIR }}" -name "*.app" -type d -print
        APP_PATH=$(find "${{ env.BUILD_DIR }}" -name "*.app" -type d -print -quit)
        echo "APP_PATH=${APP_PATH}" >> $GITHUB_ENV
        echo "Found app at: ${APP_PATH}"

    - name: Create .ipa file
      if: env.APP_PATH != ''
      run: |
        mkdir -p Payload
        cp -r "${APP_PATH}" Payload/
        zip -r "${{ github.workspace }}/TrollDebs.ipa" Payload
        rm -rf Payload

    - name: Upload .ipa
      if: env.APP_PATH != ''
      uses: actions/upload-artifact@v4
      with:
        name: TrollDebs.ipa
        path: ${{ github.workspace }}/TrollDebs.ipa
        if-no-files-found: error

    - name: Create .deb package
      if: env.APP_PATH != ''
      run: |
        mkdir -p "${{ github.workspace }}/DEBIAN"
        mkdir -p "${{ github.workspace }}/Applications"
        cp -r "${APP_PATH}" "${{ github.workspace }}/Applications/TrollDebs.app"
        dpkg-deb --build "${{ github.workspace }}" "${{ github.workspace }}/TrollDebs.deb"

    - name: Upload .deb
      if: env.APP_PATH != ''
      uses: actions/upload-artifact@v4
      with:
        name: TrollDebs.deb
        path: ${{ github.workspace }}/TrollDebs.deb
        if-no-files-found: error