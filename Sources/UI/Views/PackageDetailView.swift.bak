import SwiftUI

struct PackageDetailView: View {
    // MARK: - Properties
    
    @StateObject private var viewModel: PackageDetailViewModel
    @State private var showInjectionView = false
    @Environment(\.presentationMode) var presentationMode
    
    // MARK: - Initialization
    
    init(package: Package) {
        _viewModel = StateObject(wrappedValue: PackageDetailViewModel(package: package))
    }
    
    // MARK: - Computed Properties
    
    private var package: Package {
        viewModel.package
    }
    
    private var availableActions: [Package.PackageAction] {
        var actions: [Package.PackageAction] = []
        
        // Always show details
        actions.append(.showDetails)
        
        if package.isInstalled {
            actions.append(.remove)
            actions.append(.reinstall)
            
            // Only show inject if the package is not already injected
            if !package.isInjected {
                actions.append(.inject)
            }
        } else {
            actions.append(.install)
        }
        
        return actions
    }
    
    private var headerView: some View {
        VStack(spacing: 16) {
            ZStack {
                // Background circle with gradient
                Circle()
                    .fill(
                        LinearGradient(
                            gradient: Gradient(colors: [
                                package.isInjected ? Color.orange.opacity(0.1) : Color.accentColor.opacity(0.1),
                                package.isInjected ? Color.orange.opacity(0.2) : Color.accentColor.opacity(0.2)
                            ]),
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        )
                    )
                    .frame(width: 100, height: 100)
                    .shadow(color: package.isInjected ? Color.orange.opacity(0.2) : Color.accentColor.opacity(0.2), radius: 10, x: 0, y: 5)
                
                // Package or injection icon with animation
                Group {
                    if package.isInjected {
                        Image(systemName: "cube.transparent")
                            .font(.system(size: 50))
                            .foregroundColor(.orange)
                    } else {
                        Image(systemName: "shippingbox.fill")
                            .font(.system(size: 50))
                            .foregroundColor(.accentColor)
                    }
                }
                .symbolRenderingMode(.hierarchical)
                .symbolEffect(.bounce, value: package.isInjected)
            }
            .padding(.top, 20)
            
            VStack(spacing: 4) {
                Text(package.displayName)
                    .font(.largeTitle)
                    .fontWeight(.bold)
                    .multilineTextAlignment(.center)
                
                Text(package.version)
                    .font(.title3)
                    .foregroundColor(.secondary)
                
                if let section = package.section {
                    Text(section.uppercased())
                        .font(.caption)
                        .fontWeight(.semibold)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 4)
                        .background(Color.accentColor.opacity(0.1))
                        .foregroundColor(.accentColor)
                        .cornerRadius(4)
                }
            }
            
            Text(package.description)
                .font(.body)
                .multilineTextAlignment(.center)
                .padding(.horizontal)
                .padding(.bottom, 8)
            
            actionButtons
        }
        .padding(.bottom, 8)
        .background(Color(.systemGroupedBackground))
    }
    
    private var actionButtons: some View {
        VStack(spacing: 12) {
            // Main action buttons
            ForEach(availableActions, id: \.self) { action in
                Button(action: {
                    Task { await viewModel.handleAction(action) }
                }) {
                    HStack {
                        Image(systemName: action.systemImage)
                            .frame(width: 24)
                        Text(action.rawValue)
                        Spacer()
                        
                        if (action == .install || action == .upgrade || action == .reinstall) && viewModel.isInstalling {
                            ProgressView()
                                .padding(.trailing, 8)
                        } else if action == .remove && viewModel.isRemoving {
                            ProgressView()
                                .padding(.trailing, 8)
                        }
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(action.isDestructive ? Color.red : Color.accentColor)
                    .foregroundColor(.white)
                    .cornerRadius(10)
                }
                .buttonStyle(PlainButtonStyle())
                .disabled(viewModel.isInstalling || viewModel.isRemoving)
            }
            
            // Show injection status if injected
            if package.isInjected, let appName = package.injectedIntoApp, let date = package.injectionDate {
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Image(systemName: "checkmark.circle.fill")
                            .foregroundColor(.green)
                        Text("Injected into")
                        Text(appName)
                            .fontWeight(.semibold)
                    }
                    .font(.subheadline)
                    
                    Text("Injected \(date.formatted(.relative(presentation: .named)))")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    NavigationLink(destination: InjectedPackageDetailView(package: package)) {
                        HStack {
                            Image(systemName: "cube.transparent")
                            Text("Manage Injection")
                            Spacer()
                            Image(systemName: "chevron.right")
                                .font(.caption)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.orange.opacity(0.1))
                        .foregroundColor(.orange)
                        .cornerRadius(10)
                    }
                    .buttonStyle(PlainButtonStyle())
                }
                .padding(.top, 8)
            }
        }
        .padding(.horizontal)
    }
    
    private var infoSection: some View {
        Section(header: Text("Package Information").font(.headline)) {
            InfoRow(icon: "number", title: "Identifier", value: package.identifier)
            
            if let maintainer = package.maintainer, !maintainer.isEmpty {
                InfoRow(icon: "person.fill", title: "Maintainer", value: maintainer)
            }
            
            if let author = package.author, !author.isEmpty {
                InfoRow(icon: "person.crop.square", title: "Author", value: author)
            }
            
            InfoRow(icon: "cpu", title: "Architecture", value: package.architecture)
            
            if let installDate = package.installationDate {
                InfoRow(
                    icon: "calendar",
                    title: "Installed",
                    value: package.formattedInstallationDate
                )
            }
        }
    }
    
    private var sizeSection: some View {
        Section(header: Text("Size").font(.headline)) {
            InfoRow(icon: "externaldrive.fill", title: "Installed Size", value: package.formattedSize)
            
            if let size = package.size, size > 0 {
                InfoRow(icon: "arrow.down.circle", title: "Download Size", value: package.formattedPackageSize)
            }
        }
    }
    
    private var dependenciesSection: some View {
        Group {
            if let depends = package.depends, !depends.isEmpty {
                Section(header: Text("Dependencies").font(.headline)) {
                    ForEach(depends, id: \.self) { dependency in
                        Text(dependency)
                            .font(.subheadline)
                            .padding(.vertical, 4)
                    }
                }
            }
            
            if let conflicts = package.conflicts, !conflicts.isEmpty {
                Section(header: Text("Conflicts").font(.headline)) {
                    ForEach(conflicts, id: \.self) { conflict in
                        Text(conflict)
                            .font(.subheadline)
                            .foregroundColor(.red)
                            .padding(.vertical, 4)
                    }
                }
            }
            
            if let provides = package.provides, !provides.isEmpty {
                Section(header: Text("Provides").font(.headline)) {
                    ForEach(provides, id: \.self) { provide in
                        Text(provide)
                            .font(.subheadline)
                            .foregroundColor(.green)
                            .padding(.vertical, 4)
                    }
                }
            }
        }
    }
    
    var body: some View {
        ScrollView {
            VStack(spacing: 0) {
                headerView
                
                VStack(spacing: 0) {
                    infoSection
                    sizeSection
                    dependenciesSection
                }
                .padding(.horizontal)
                .padding(.top, 8)
                
                if let filename = package.filename, !filename.isEmpty {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Filename")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .padding(.horizontal)
                            .padding(.top, 16)
                        
                        Text(filename)
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .padding()
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .background(Color(.systemGray6))
                            .cornerRadius(8)
                
                Spacer()
            }
            .navigationBarTitle(package.name, displayMode: .inline)
            .alert("Error", isPresented: $viewModel.showError) {
                Button("OK", role: .cancel) {}
            } message: {
                Text(viewModel.errorMessage)
            }
            .confirmationDialog(
                "Remove Package",
                isPresented: $viewModel.showDeleteConfirmation,
                titleVisibility: .visible
            ) {
                Button("Remove", role: .destructive) {
                    Task { await viewModel.removePackage() }
                }
                Button("Cancel", role: .cancel) {}
            } message: {
                Text("Are you sure you want to remove \(package.name)?")
            }
            .sheet(isPresented: $showInjectionView) {
                NavigationView {
                    PackageInjectionView(package: package)
                        .navigationBarTitle("Inject into App", displayMode: .inline)
                        .navigationBarItems(trailing: Button("Done") {
                            showInjectionView = false
                        })
                }
            }
        }
        .background(Color(.systemGroupedBackground).ignoresSafeArea())
    }
    
    private func presentInjectionView() {
        showInjectionView = true
    }
}

// MARK: - Info Row View

struct InfoRow: View {
    let icon: String
    let title: String
    let value: String
    
    var body: some View {
        HStack(spacing: 12) {
            Image(systemName: icon)
                .foregroundColor(.secondary)
                .frame(width: 24)
            
            VStack(alignment: .leading, spacing: 2) {
                Text(title)
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                
                Text(value)
                    .font(.body)
                    .lineLimit(2)
            }
            
            Spacer()
        }
        .padding(.vertical, 8)
    }
}

// MARK: - Previews

struct PackageDetailView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationView {
            PackageDetailView(package: Package.samplePackages[0])
        }
        .previewDisplayName("Standard Package")
        
        NavigationView {
            PackageDetailView(package: Package.samplePackages[1])
        }
        .previewDisplayName("Tweak Package")
    }
}
